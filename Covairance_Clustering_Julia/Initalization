


function wishart_mixture_initialization_hierarchical(S::ScatterMatrix, K::Int, is_diag::Bool)
    B = size(S.S, 3)
    p = size(S.S, 2)
    best_lik = -Inf
    best_pars = nothing

    S_vec = zeros(p, B)
    for i in 1:size(S.S, 3)
        println(S.S[:, :, i])
        S_vec[:, i] = sqrt.(vec(S.S[:, :, i]))
    end

    d = pairwise(Euclidean(), S_vec, dims=2)
    hc = hclust(d, linkage=:ward)
    IDs = cutree(hc, k=K)
    println(counts(IDs))
    bad_clust = false
    V = zeros(p, p, K)

    Pi = zeros(K)
    
    for k in 1:K
        W = S.S[:, :, IDs .== k]
        df_sub = S.n[IDs .== k]
        for i in 1:size(W, 3)
            V[:, :, k] += W[:, :, i]
        end
        V[:, :, k] /= sum(S.n[IDs .== k])
        Pi[k] = sum(S.n[IDs .== k])
        if is_diag
            V[:, :, k] = Diagonal(diag(V[:, :, k]))
        end
        if Pi[k] <= p
             return nothing
        end
        if isnothing(try
            inv(V[:, :, k])
        catch e
            nothing
        end)
            @warn "Degenerate model.. returning nothing"
            return nothing
        end
    end


    Pi = Pi / sum(Pi)


    return WishartMixture(V, Pi)
end



function wishart_mixture_initialization_random(S::ScatterMatrix, K::Int, is_diag::Bool; M=100)
    B = size(S.S, 3)
    p = size(S.S, 2)
    best_lik = -Inf
    best_pars = nothing

    S_vec = zeros(p*p, B)
    for i in 1:B
        eig_val = eigvals(S.S[: ,: ,i])
        eig_vec = eigvecs(S.S[: ,: ,i])
        S_vec[:, i] = vec(eig_vec * diagm(sqrt.(eig_val)) * transpose(eig_vec))
    end


    d = pairwise(Euclidean(), S_vec, dims=2)

    for m in M

        seeds = rand(1:B, K)

        D = d[:,seeds]

        ID = argmax.(eachrow(D))
        print(ID)
        error("hi")

        bad_clust = false
        V = zeros(p, p, K)

        Pi = zeros(K)
        
        for k in 1:K
            W = S.S[:, :, IDs .== k]
            df_sub = S.n[IDs .== k]
            for i in 1:size(W, 3)
                V[:, :, k] += W[:, :, i]
            end
            V[:, :, k] /= sum(S.n[IDs .== k])
            Pi[k] = sum(S.n[IDs .== k])
            if is_diag
                V[:, :, k] = Diagonal(diag(V[:, :, k]))
            end
            if Pi[k] <= p
                return nothing
            end
            if isnothing(try
                inv(V[:, :, k])
            catch e
                nothing
            end)
                @warn "Degenerate model.. returning nothing"
                return nothing
            end
        end


        Pi = Pi / sum(Pi)
    end


    return WishartMixture(V, Pi)
end

yy = generate_random_wishart_mixture(3, 4)

uu = uniform_sampling_closed_set(yy, 100, 5, 0, 5)

S = get_S(uu.X, uu.class)

wishart_mixture_initialization_random(S, 3, false)